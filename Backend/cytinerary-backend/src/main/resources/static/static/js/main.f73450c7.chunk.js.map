{"version":3,"sources":["components/dialog_windows/newEventModal.tsx","components/list_items/ShareDialogSharedListItem.tsx","components/list_items/ShareDialogSearchListItem.tsx","components/dialog_windows/ShareScheduleDialogWindow.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["NewEventModal","props","state","name","description","label","fromDate","Date","toDate","emptyFieldMessageVisible","participantsDialogVisible","participantsError","participants","participantsNetIds","participantValue","participantsErrorLabel","this","setState","eventId","uuidv4","fetch","method","headers","Accept","body","JSON","stringify","creator","user","then","response","userId","console","log","participant","err","closeModal","onClose","netId","json","includes","push","Dialog","maxWidth","open","visible","onBackdropClick","DialogTitle","DialogContent","style","color","flexDirection","display","TextField","error","id","onChange","e","target","value","variant","helperText","Button","onClick","addParticipant","submit","React","ShareDialogSharedListItem","ListItem","ListItemAvatar","Avatar","backgroundColor","charAt","ListItemText","primary","secondary","email","ListItemSecondaryAction","IconButton","edge","onRemove","Close","ShareDialogSearchListItem","cursor","theme","createMuiTheme","palette","main","red","yellow","type","background","paper","grey","default","typography","fontFamily","ShareScheduleDialogWindow","useState","currentlyShared","setCurrentlyShared","discoveredUsers","setDiscoveredUsers","autocompleteAnchor","setAutocompleteAnchor","input","setInput","getSharedUsers","sharerId","newCurrentlyShared","forEach","sharee","useEffect","newDiscoveredUsers","firstName","lastName","fullWidth","zIndex","ThemeProvider","width","InputProps","startAdornment","InputAdornment","position","People","event","currentTarget","key","Popper","anchorEl","placement","Paper","List","map","index","array","toUpperCase","some","sharedUser","shareeId","Divider","marginTop","overflowY","height","window","innerHeight","flex","person","marginBottom","DialogActions","App","showShareScheduleDialog","setShowShareScheduleDialog","showNewEventDialog","setNewEventDialog","alignItems","justifyContent","alert","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f73450c7.chunk.js","sourcesContent":["import * as React from 'react'\r\nimport { Dialog, DialogTitle, DialogContent, Button, TextField, NativeSelect } from '@material-ui/core/';\r\nimport { DateTimePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport EventParticipantDialogWindow from './EventParticipantDialogWindow'\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\ninterface IProps {\r\n  //onSubmit: string,\r\n  visible: boolean,\r\n  onClose: () => void,\r\n  user: string,\r\n}\r\ninterface IState {\r\n  name: string,\r\n  description: string,\r\n  label: string,\r\n  fromDate: Date,\r\n  toDate: Date,\r\n  emptyFieldMessageVisible: boolean,\r\n  participantsDialogVisible: boolean,\r\n  participantsError: boolean,\r\n  participants: string[],\r\n  participantsNetIds: string,\r\n  participantValue: string,\r\n  participantsErrorLabel : string,\r\n}\r\n\r\nclass NewEventModal extends React.Component<IProps, IState> {\r\n  constructor(props: IProps) {\r\n    super(props);\r\n    this.state = {\r\n      name: '',\r\n      description: '',\r\n      label: '',\r\n      fromDate: new Date(),\r\n      toDate: new Date(),\r\n      emptyFieldMessageVisible: false,\r\n      participantsDialogVisible: false,\r\n      participantsError: false,\r\n      participants: [],\r\n      participantsNetIds: '',\r\n      participantValue: '',\r\n      participantsErrorLabel: '',\r\n    }\r\n  }\r\n\r\n  submit() {\r\n    if(this.state.name === '' || this.state.description === '') {\r\n      this.setState({\r\n        emptyFieldMessageVisible: true,\r\n      })\r\n    }\r\n    else {\r\n      let eventId: string = uuidv4();\r\n      try {\r\n        fetch('/createEvent', {\r\n          method: 'POST',\r\n            headers: {\r\n              Accept: 'application/json',\r\n              'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n              eventId: eventId,\r\n              creator: this.props.user,\r\n              name: this.state.name,\r\n              description: this.state.description,\r\n              label: this.state.label,\r\n            }),\r\n        }).then((response) => {\r\n          //Add each participant once the event has been created\r\n          for(let userId of this.state.participants) {\r\n            console.log(userId);\r\n            try {\r\n              fetch('/addParticipant', {\r\n                method: 'POST',\r\n                  headers: {\r\n                    Accept: 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                  },\r\n                  body: JSON.stringify({\r\n                    eventId: eventId,\r\n                    participant: userId,\r\n                  }),\r\n              }).then((response) => response)\r\n            }\r\n            catch(err) {\r\n              console.log(err)\r\n            }\r\n          }\r\n          this.closeModal();\r\n        });\r\n      }\r\n      catch(err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n  }\r\n\r\n  closeModal() {\r\n    //Ensure that all fields are reset\r\n    this.setState({\r\n      participants: [],\r\n      participantsNetIds: '',\r\n      emptyFieldMessageVisible: false,\r\n      participantsError: false,\r\n      participantsErrorLabel: '',\r\n      participantValue: '',\r\n      name: '',\r\n      description: '',\r\n      label: '',\r\n    })\r\n    this.props.onClose();\r\n  }\r\n\r\n  addParticipant() {\r\n    //Check if user trys to add themselves\r\n    if(this.state.participantValue === this.props.user) {\r\n      this.setState({\r\n        participantsError:true,\r\n        participantsErrorLabel: 'You cannot be the participant of the event',\r\n      })\r\n    }\r\n    else {\r\n      fetch('/userExists', {\r\n        method: 'POST',\r\n          headers: {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n            netId: this.state.participantValue,\r\n          }),\r\n      }).then((response) => response.json())\r\n      .then((json) => {\r\n        let participants : string[] = this.state.participants!;\r\n        let participantsNetIds = this.state.participantsNetIds!;\r\n        if(json[0]) {\r\n          //Check if the new participant was already a participant in the list\r\n          if(this.state.participants.includes(json[0].userId)) {\r\n            this.setState({\r\n              participantsError:true,\r\n              participantsErrorLabel: 'You cannot add duplicated participants',\r\n            })\r\n          }\r\n          //Add the new participant, reset and error messages\r\n          else {\r\n            participants.push(json[0].userId)\r\n            participantsNetIds += json[0].netId + ', '\r\n            this.setState({\r\n              participants,\r\n              participantsNetIds,\r\n              participantsErrorLabel: '',\r\n              participantValue: '',\r\n              participantsError:false,});\r\n          }\r\n        }\r\n        else {\r\n          this.setState({\r\n            participantsError:true,\r\n            participantsErrorLabel: 'User does not exist',\r\n          })\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div>\r\n        <Dialog maxWidth = {'md'} open = {this.props.visible} onBackdropClick = {() => {this.closeModal()}}>\r\n          <DialogTitle>Create an event</DialogTitle>\r\n              <DialogContent>\r\n                {this.state.emptyFieldMessageVisible && <text style = {{color:'red'}} >Required: Name and Description</text> }\r\n                <div style = {{flexDirection: 'column', }}>\r\n                  <div style = {{display: 'flex'}}> <TextField error = {this.state.emptyFieldMessageVisible && (this.state.name === '')} id = \"nameInput\" label = \"Name\" onChange = {(e) => {this.setState({name: e.target.value})}} variant=\"outlined\"/> </div>\r\n                  <div style = {{display: 'flex'}}> <TextField error = {this.state.emptyFieldMessageVisible && (this.state.description === '')} id = \"descriptionInput\" label = \"Description\" onChange={(e) => {this.setState({description: e.target.value})}} variant=\"outlined\"/> </div>\r\n                  <div id = \"time-selector\">\r\n                  </div>\r\n                  <div style = {{display: 'flex'}}>\r\n                    <TextField id = \"descriptionInput\" onChange={(e) => {this.setState({label: e.target.value})}} label = \"Label\" variant=\"outlined\"/>\r\n                    {/*Will Need to add color block for color selection*/}\r\n                  </div>\r\n                  <div>\r\n                    <text>Participants: {this.state.participantsNetIds}</text>\r\n                    <TextField error = {this.state.participantsError} value={this.state.participantValue} helperText= {this.state.participantsErrorLabel} label = \"Participant\" id = \"participantInput\" onChange={(e) => {this.setState({participantValue: e.target.value})}} variant=\"outlined\"/>\r\n                    <Button onClick = {() => {this.addParticipant()}}> Add Participant</Button>\r\n                  </div>\r\n                  <div>\r\n                  <Button onClick = {() => {this.closeModal()}} style = {{color:'black'}}>Cancel</Button>\r\n                  <Button onClick = {() => {this.submit()}} style = {{color:'black'}}>Create</Button>\r\n                  </div>\r\n                </div>\r\n              </DialogContent>\r\n        </Dialog>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewEventModal;\r\n","import React from 'react';\r\nimport {\r\n  ListItem,\r\n  ListItemAvatar,\r\n  Avatar,\r\n  ListItemText,\r\n  ListItemSecondaryAction,\r\n  IconButton\r\n} from '@material-ui/core';\r\nimport {\r\n  Close\r\n} from '@material-ui/icons';\r\n\r\ninterface Props {\r\n  name: string,\r\n  email: string,\r\n  color: string,\r\n  onRemove: Function\r\n}\r\n\r\nfunction ShareDialogSharedListItem(props: Props) {\r\n\r\n  return (\r\n    <ListItem>\r\n      <ListItemAvatar>\r\n        <Avatar\r\n          style={{\r\n            backgroundColor: props.color,\r\n            color: 'white'\r\n          }}\r\n        >\r\n          {props.name.charAt(0)}\r\n        </Avatar>\r\n      </ListItemAvatar>\r\n      <ListItemText\r\n        primary={props.name}\r\n        secondary={props.email}\r\n      />\r\n      <ListItemSecondaryAction>\r\n        <IconButton\r\n          edge='end'\r\n          onClick={() => props.onRemove()}\r\n        >\r\n          <Close />\r\n        </IconButton>\r\n      </ListItemSecondaryAction>\r\n    </ListItem>\r\n  );\r\n\r\n}\r\n\r\nexport default ShareDialogSharedListItem;\r\n","import React from 'react';\r\nimport {\r\n  ListItem,\r\n  ListItemAvatar,\r\n  Avatar,\r\n  ListItemText\r\n} from '@material-ui/core';\r\n\r\ninterface Props {\r\n  name: string,\r\n  email: string,\r\n  color: string,\r\n  onClick: Function\r\n}\r\n\r\nfunction ShareDialogSearchListItem(props: Props) {\r\n\r\n  return (\r\n    <ListItem\r\n      onClick={() => props.onClick()}\r\n      style={{\r\n        cursor: 'grab'\r\n      }}\r\n    >\r\n      <ListItemAvatar>\r\n        <Avatar\r\n          style={{\r\n            backgroundColor: props.color,\r\n            color: 'white'\r\n          }}\r\n        >\r\n          {props.name.charAt(0)}\r\n        </Avatar>\r\n      </ListItemAvatar>\r\n      <ListItemText\r\n        primary={props.name}\r\n        secondary={props.email}\r\n      />\r\n    </ListItem>\r\n  );\r\n\r\n}\r\n\r\nexport default ShareDialogSearchListItem;\r\n","import React, {\r\n  useState,\r\n  useEffect\r\n} from 'react';\r\nimport {\r\n  ThemeProvider,\r\n  createMuiTheme\r\n} from '@material-ui/core/styles';\r\nimport red from '@material-ui/core/colors/red';\r\nimport yellow from '@material-ui/core/colors/yellow';\r\nimport grey from '@material-ui/core/colors/grey';\r\nimport {\r\n  TextField,\r\n  Dialog,\r\n  DialogContent,\r\n  DialogActions,\r\n  DialogTitle,\r\n  Button,\r\n  InputAdornment,\r\n  Divider,\r\n  List,\r\n  Popper,\r\n  Paper\r\n} from '@material-ui/core';\r\nimport {\r\n  People\r\n} from '@material-ui/icons';\r\nimport ShareDialogSharedListItem from '../list_items/ShareDialogSharedListItem';\r\nimport ShareDialogSearchListItem from '../list_items/ShareDialogSearchListItem';\r\n\r\ninterface Props {\r\n  visible: boolean,\r\n  onClose: Function\r\n}\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: red[600]\r\n    },\r\n    secondary: {\r\n      main: yellow[700]\r\n    },\r\n    type: 'dark',\r\n    background: {\r\n      paper: grey[800],\r\n      default: grey[900]\r\n    },\r\n  },\r\n  typography: {\r\n    fontFamily: 'Roboto'\r\n  }\r\n});\r\n\r\nconst sharerId = '111';\r\n\r\nfunction ShareScheduleDialogWindow(props: Props) {\r\n\r\n  const [currentlyShared, setCurrentlyShared] = useState<{ userId: string, name: string, email: string }[]>([]);\r\n  const [discoveredUsers, setDiscoveredUsers] = useState<{ userId: string, name: string, email: string }[]>([]);\r\n  const [autocompleteAnchor, setAutocompleteAnchor] = useState<HTMLElement | null>(null);\r\n  const [input, setInput] = useState<string>('');\r\n\r\n  useEffect(getUsers, []);\r\n  useEffect(() => getSharedUsers(sharerId), []);\r\n\r\n  function getUsers() {\r\n    try {\r\n      fetch('/getUsers', {\r\n        method: 'GET',\r\n        headers: {\r\n          Accept: 'application/json',\r\n          'Content-Type': 'application/json',\r\n        },\r\n      }).then((response) => response.json())\r\n        .then((json) => {\r\n          let newDiscoveredUsers: { userId: string, name: string, email: string }[] = [];\r\n          json.forEach((user: { userId: string, firstName: string, lastName: string, netId: string }) => {\r\n            newDiscoveredUsers.push({\r\n              userId: user.userId,\r\n              name: user.firstName + ' ' + user.lastName,\r\n              email: user.netId + '@iastate.edu'\r\n            });\r\n          });\r\n          setDiscoveredUsers(newDiscoveredUsers);\r\n        });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  function getSharedUsers(sharerId: string) {\r\n    try {\r\n      fetch('/getSharedUsers', {\r\n        method: 'POST',\r\n        headers: {\r\n          Accept: 'application/json',\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          sharerId: sharerId\r\n        }),\r\n      }).then((response) => response.json())\r\n        .then((json) => {\r\n          let newCurrentlyShared: { userId: string, name: string, email: string }[] = [];\r\n          json.forEach((sharee: string[]) => {\r\n            newCurrentlyShared.push({\r\n              userId: sharee[0],\r\n              name: sharee[3] + ' ' + sharee[2],\r\n              email: sharee[1] + '@iastate.edu'\r\n            });\r\n          });\r\n          setCurrentlyShared(newCurrentlyShared);\r\n        });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Dialog\r\n      open={props.visible}\r\n      onClose={() => props.onClose()}\r\n      fullWidth={true}\r\n      maxWidth='sm'\r\n      style={{\r\n        zIndex: 1\r\n      }}\r\n    >\r\n      <ThemeProvider theme={theme}>\r\n        <DialogTitle>Share Schedule</DialogTitle>\r\n        <DialogContent>\r\n          <TextField\r\n            variant='filled'\r\n            label='Add people'\r\n            style={{\r\n              width: '100%'\r\n            }}\r\n            InputProps={{\r\n              startAdornment: <InputAdornment\r\n                position='start'\r\n              >\r\n                <People />\r\n              </InputAdornment>\r\n            }}\r\n            onChange={(event) => {\r\n              setAutocompleteAnchor(event.currentTarget);\r\n              setInput(event.target.value);\r\n            }}\r\n            key='input'\r\n          />\r\n          <Popper\r\n            open={input !== ''}\r\n            anchorEl={autocompleteAnchor}\r\n            placement='bottom-start'\r\n            style={{\r\n              zIndex: 2\r\n            }}\r\n          >\r\n            <Paper>\r\n              <List>\r\n                {discoveredUsers.map((\r\n                  user: { name: string, email: string, userId: string },\r\n                  index: number,\r\n                  array: { name: string, email: string, userId: string }[]\r\n                ) => (\r\n                    ((user.name.toUpperCase().includes(input.toUpperCase()) || user.email.toUpperCase().includes(input.toUpperCase())) && user.userId != sharerId && !currentlyShared.some((sharedUser) => sharedUser.userId === user.userId)) && <ShareDialogSearchListItem\r\n                      name={user.name}\r\n                      email={user.email}\r\n                      color='red'\r\n                      onClick={() => {\r\n                        try {\r\n                          fetch('/addSharedUser', {\r\n                            method: 'POST',\r\n                            headers: {\r\n                              Accept: 'application/json',\r\n                              'Content-Type': 'application/json',\r\n                            },\r\n                            body: JSON.stringify({\r\n                              sharerId: sharerId,\r\n                              shareeId: user.userId\r\n                            }),\r\n                          }).then(() => getSharedUsers(sharerId));\r\n                        } catch (err) {\r\n                          console.log(err);\r\n                        }\r\n                        getSharedUsers(sharerId);\r\n                        setInput('');\r\n                      }}\r\n                      key={`${user.name}-${user.email}-${index}-search`}\r\n                    />\r\n                  ))}\r\n              </List>\r\n            </Paper>\r\n          </Popper>\r\n          <Divider\r\n            style={{\r\n              marginTop: '10px',\r\n            }}\r\n          />\r\n          <div\r\n            style={{\r\n              overflowY: 'scroll',\r\n              height: window.innerHeight * 0.26,\r\n              flex: 1\r\n            }}\r\n          >\r\n            <List>\r\n              {currentlyShared.map((\r\n                person: { userId: string, name: string, email: string },\r\n                index: number,\r\n                array: { userId: string, name: string, email: string }[]\r\n              ) => (\r\n                  <ShareDialogSharedListItem\r\n                    name={person.name}\r\n                    email={person.email}\r\n                    color='red'\r\n                    onRemove={() => {\r\n                      try {\r\n                        fetch('/deleteSharedUser', {\r\n                          method: 'POST',\r\n                          headers: {\r\n                            Accept: 'application/json',\r\n                            'Content-Type': 'application/json',\r\n                          },\r\n                          body: JSON.stringify({\r\n                            sharerId: sharerId,\r\n                            shareeId: person.userId\r\n                          }),\r\n                        }).then(() => getSharedUsers(sharerId));\r\n                      } catch (err) {\r\n                        console.log(err);\r\n                      }\r\n                    }}\r\n                    key={`${person.name}-${person.email}-${index}-shared`}\r\n                  />\r\n                ))}\r\n            </List>\r\n          </div>\r\n          <Divider\r\n            style={{\r\n              marginBottom: '10px',\r\n            }}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button\r\n            variant='contained'\r\n            color='primary'\r\n            onClick={() => props.onClose()}\r\n          >\r\n            Done\r\n          </Button>\r\n        </DialogActions>\r\n      </ThemeProvider>\r\n    </Dialog>\r\n  );\r\n\r\n}\r\n\r\nexport default ShareScheduleDialogWindow;\r\n","import React, { useState } from 'react';\r\nimport {\r\n  Button,\r\n  ThemeProvider,\r\n  createMuiTheme\r\n} from '@material-ui/core'\r\nimport red from '@material-ui/core/colors/red';\r\nimport yellow from '@material-ui/core/colors/yellow';\r\nimport grey from '@material-ui/core/colors/grey';\r\nimport './App.css';\r\nimport NewEventModal from './components/dialog_windows/newEventModal'\r\nimport ShareScheduleDialogWindow from './components/dialog_windows/ShareScheduleDialogWindow';\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: red[600]\r\n    },\r\n    secondary: {\r\n      main: yellow[700]\r\n    },\r\n    type: 'dark',\r\n    background: {\r\n      paper: grey[800],\r\n      default: grey[900]\r\n    },\r\n  },\r\n  typography: {\r\n    fontFamily: 'Roboto'\r\n  }\r\n});\r\n\r\nfunction App() {\r\n  const [showShareScheduleDialog, setShowShareScheduleDialog] = useState<boolean>(false);\r\n  const [showNewEventDialog, setNewEventDialog] = useState<boolean>(false);\r\n\r\n  return (\r\n    <ThemeProvider\r\n      theme={theme}\r\n    >\r\n      <div style={{\r\n        display: 'flex',\r\n        backgroundColor: 'black',\r\n        height: window.innerHeight,\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n      }}>\r\n        <ShareScheduleDialogWindow\r\n          onClose={() => setShowShareScheduleDialog(false)}\r\n          visible={showShareScheduleDialog}\r\n        />\r\n        <NewEventModal visible = {showNewEventDialog} user = {'111'} onClose = {() => {setNewEventDialog(false)}}/>\r\n        <Button\r\n          color='primary'\r\n          variant='contained'\r\n          onClick={() => setShowShareScheduleDialog(true)}\r\n        >\r\n          Share\r\n        </Button>\r\n\r\n        <Button color='primary' variant='contained' onClick = {() => {\r\n          try{\r\n            fetch('/getEvents', {\r\n              method: 'POST',\r\n                headers: {\r\n                  Accept: 'application/json',\r\n                  'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                  creator : \"111\"\r\n                }),\r\n            }).then((response) => response.json())\r\n            .then((json) => {\r\n              alert(JSON.stringify(json))\r\n            });\r\n          }catch(err){\r\n            console.log(err);\r\n          }\r\n        }}>View this User's events</Button>\r\n\r\n        <Button color='primary' variant='contained' onClick = {() => {setNewEventDialog(true)}}>Create a New Event</Button>\r\n    </div>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}